gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==2)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- seq(.5,2,.5)           # strength of initial encoding
lambda <- 0                     # rate of memory decay
sigma <- 1      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- seq(2,8,2)            # number of pics
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==2)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 2                      # strength of initial encoding
lambda <- 0                     # rate of memory decay
sigma <- 1                      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==2)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
inv.logit <- function(x) {1 / (1 + exp(-x))} # for checking coefficients in glm
mf_labeller <- function(var, value){
value <- as.character(value)
if (var=="numPicN") {
value[value=="2"] <- "2-Referents"
value[value=="4"] <- "4-Referents"
value[value=="6"] <- "6-Referents"
}
return(value)
}
d <- read.csv("/Users/kmacdonald/Documents/Projects/SOC_XSIT/processed_data/soc_xsit_expt1_all.csv")
d.test <- subset(d, testTrial==1)
length(unique(d.test$subid))
d.first.trial <- subset(d, testTrial==1 & first.trial==TRUE)
length(unique(d.first.trial$subid))
d.exp <- subset(d, exposureTrial==1)
length(unique(d.exp$subid))
d.exp$faceIdx6 <- revalue(d.exp$face, c("eyes_left_90"=0, "eyes_right_90"=1,
"eyes_left"=2, "eyes_down_left"=3,
"eyes_down_right"=4, "eyes_right"=5,
"eyescenter"=-1))
d.exp$choseSocial <- NA
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$chosenIdx <= 1),
"midline",
"bottom")
d.exp$choseSocial <- ifelse((d.exp$numPic == 6) & (d.exp$condition =="Social"),
d.exp$faceIdx6 == d.exp$chosenIdx,
d.exp$faceIdx == d.exp$chosenIdx)
mss.exp <- aggregate(choseSocial ~ trialType + subid + condition + numPicN, data=d.exp, FUN=mean)
ms.exp <- aggregate(choseSocial ~  condition + numPicN, data=d.exp, FUN=mean)
ms.exp$choseSocial.cih <- aggregate(choseSocial ~ condition + numPicN, data=mss.exp, FUN=ci.high)$choseSocial
ms.exp$choseSocial.cil <- aggregate(choseSocial ~ condition + numPicN, data=mss.exp, FUN=ci.low)$choseSocial
ms.exp$numPicF <- as.factor(ms.exp$numPicN)
quartz(width=3,height=4,title = "Experiment 2: Exposure Trials")
p <- ggplot(data=ms.exp, aes(x=numPicF, y=choseSocial)) +
geom_bar(stat="identity", fill="springgreen2") +
geom_errorbar(aes(ymin=choseSocial-choseSocial.cil, ymax=choseSocial+choseSocial.cih),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
ylim(0,1) +
xlab("Number of Referents") +
ylab("Proportion Chose Target of Gaze") +
theme_bw()
brewerplot <- function (palette) {
p + scale_fill_brewer(palette = palette) + opts(title=palette)
}
brewerplot ("Paired")
quartz(width=3,height=4,title = "Experiment 2: Exposure Trials")
p <- ggplot(data=ms.exp, aes(x=numPicF, y=choseSocial)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=choseSocial-choseSocial.cil, ymax=choseSocial+choseSocial.cih),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
ylim(0,1) +
xlab("Number of Referents") +
ylab("Proportion Chose Target of Gaze") +
theme_bw()
brewerplot <- function (palette) {
p + scale_fill_brewer(palette = palette) + opts(title=palette)
}
brewerplot ("Paired")
brewerplot <- function (palette) {
p + scale_fill_brewer(palette = palette) + opts(title=palette)
}
brewerplot ("Paired")
quartz(width=3,height=4,title = "Experiment 2: Exposure Trials")
<- ggplot(data=ms.exp, aes(x=numPicF, y=choseSocial)) +
geom_bar(stat="identity", fill="deepskyblue2") +
geom_errorbar(aes(ymin=choseSocial-choseSocial.cil, ymax=choseSocial+choseSocial.cih),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
ylim(0,1) +
xlab("Number of Referents") +
ylab("Proportion Chose Target of Gaze") +
theme_bw()
quartz(width=3,height=4,title = "Experiment 2: Exposure Trials")
ggplot(data=ms.exp, aes(x=numPicF, y=choseSocial)) +
geom_bar(stat="identity", fill="deepskyblue2") +
geom_errorbar(aes(ymin=choseSocial-choseSocial.cil, ymax=choseSocial+choseSocial.cih),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
ylim(0,1) +
xlab("Number of Referents") +
ylab("Proportion Chose Target of Gaze") +
theme_bw()
gamma <- 1.5                      # strength of initial encoding
lambda <- 0.1597503                    # rate of memory decay
sigma <- 1                      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4                     # number of pics
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==2)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5                      # strength of initial encoding
lambda <- 0.1597503                    # rate of memory decay
sigma <- 1                      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4                     # number of pics
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==1.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5                    # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- 1                      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4                     # number of pics
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==1.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5                    # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- 0.57                      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4                     # number of pics
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==1.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
options(device="quartz")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==1.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
?bootstrap()
library(bootstrap)
?bootstrap()
?quantile()
quantile(x <- rnorm(1001))
x
x <- rnorm(1000)
?rnorm()
theta
?aggregate()
rm(list=ls())
library(plotrix)
library(lattice)
library(rjson)
library(ggplot2)
library(plyr)
library(chron)
library(car)
library(stringr)
all.data <- data.frame()
data <- read.table("/Users/kmacdonald/Documents/Projects/Mindset_mods/mindsets/theories.csv")
?read.table
data <- read.csv("/Users/kmacdonald/Documents/Projects/Mindset_mods/mindsets/theories.csv")
data <- read.csv("/Users/kmacdonald/Documents/Projects/Mindset_mods/mindsets/theories.csv",
header=TRUE)
data <- read.csv("/Users/kmacdonald/Documents/Projects/Mindset_mods/mindsets/theories.csv",
header=TRUE, row.names=NULL)
View(data)
data <- read.csv("/Users/kmacdonald/Documents/Projects/Mindset_mods/mindsets/theories.csv",
header=TRUE)
t <- read.csv("theories_results_processed.csv")
getwd()
setwd("/Users/kmacdonald/Documents/Projects/Mindset_mods/mindsets")
getwd()
t <- read.csv("theories_results_processed.csv")
rm(list=ls())
t <- read.csv("theories_results_processed.csv")
View(t)
t <- read.csv("theories_results_processed.csv")
t$effort <- factor(t$effort, levels=c("low", "medium", "high"),
labels=c("Low effort", "Medium effort", "High effort"))
t$ability <- factor(t$ability, levels=c("low", "high"),
labels=c("Low ability", "High ability"))
t$difficulty <- factor(t$difficulty, levels=c("easy", "difficult"),
labels=c("Easy", "Difficult"))
t <- subset(t, heardOf=="no")
t <- subset(t, sanity1 > sanity0)
t$entityScore <- t$entity1 + t$entity2 + (7 - t$increm1) + (7 - t$increm2)
ggplot(t, aes(x=entityScore)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=1,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
theme_bw()
r = read.table("goals-other-60Ss.results", header=T, sep="\t")
r.sorted <- r[with(r, order(subject, trial_type, -response)), ]
r.sorted$rank <- c(-1, -1, -1, 1, 2, 3, 4, 5, 6, 7)
r.sorted.top <- subset(r.sorted, rank==6)
med <- median(r.sorted.top$dweck_sum_score)
r.sorted.top$mindset <- ifelse(r.sorted.top$dweck_sum_score > med, "fixed", "growth")
quant <- quantile(r.sorted.top$dweck_sum_score)
r.sorted.top$mindsetquart <- ifelse(r.sorted.top$dweck_sum_score < quant[2], 1,
ifelse(r.sorted.top$dweck_sum_score < quant[3], 2,
ifelse(r.sorted.top$dweck_sum_score < quant[4], 3, 4)))
ggplot(r.sorted.top, aes(x=version)) +
geom_bar(aes(y = (..count..))) +
theme_bw() +
facet_wrap(~mindset, ncol=2)
library(ggplot2)
ggplot(r.sorted.top, aes(x=version)) +
geom_bar(aes(y = (..count..))) +
theme_bw() +
facet_wrap(~mindset, ncol=2)
r$mindset <- ifelse(r$dweck_sum_score > med, "fixed", "growth")
r.goals <- subset(r, trial_type=="g")
ggplot(r.goals, aes(x=dweck_sum_score, y=response, color=mindset)) +
geom_point() +
facet_wrap(~version, ncol=3) +
theme_bw()
r.dweck <- subset(r, trial_type=="d")
ggplot(r.dweck, aes(x=dweck_sum_score, y=response, color=mindset)) +
geom_point() +
facet_wrap(~version, ncol=3) +
theme_bw()
r.goals <- subset(r, trial_type=="g")
ggplot(r.goals, aes(x=dweck_sum_score, y=response, color=mindset)) +
geom_point() +
facet_wrap(~version, ncol=3) +
theme_bw()
r.dweck <- subset(r, trial_type=="d")
ggplot(r.dweck, aes(x=dweck_sum_score, y=response, color=mindset)) +
geom_point() +
facet_wrap(~version, ncol=3) +
theme_bw()
conf <- function(v) {
v <- v[is.na(v) == F]
nsubj=length(v)
sample.means <- replicate(100, mean(sample(v, nsubj, replace=TRUE)))
return(quantile(sample.means, c(0.025, 0.975)))
}
lower.conf <- function(v) {
conf(v)[["2.5%"]]
}
upper.conf <- function(v) {
conf(v)[["97.5%"]]
}
rm(ls())
rm(list=ls())
r = read.table("goals-other-60Ss.results", header=T, sep="\t")
library(ggplot2)
r.sorted <- r[with(r, order(subject, trial_type, -response)), ]
r.sorted$rank <- c(-1, -1, -1, 1, 2, 3, 4, 5, 6, 7)
r.sorted.top <- subset(r.sorted, rank==6)
names(r)
ggplot(r, aes(x=dweck_sum_score)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=1,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
theme_bw()
ggplot(r, aes(x=dweck_sum_score)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=0.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
theme_bw()
